version: '3.8'

# Define a custom bridge network to allow services to communicate by name.
networks:
  app_network:
    driver: bridge

services:
  db:
    image: postgres:15-alpine
    container_name: conversational_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword}
      POSTGRES_DB: ${DB_NAME:-app_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "5432:5432"

  backend:
    build: ./backend
    container_name: conversational_backend
    restart: always
    ports:
      # Expose the backend on port 8000 so the user's browser can reach it.
      - "8000:8000"
    env_file:
      - .env
    environment:
      # The backend can reach the db via its service name "db" on the custom network.
      DATABASE_URL: "postgresql://${DB_USER:-user}:${DB_PASSWORD:-devpassword}@db:5432/${DB_NAME:-app_db}"
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    depends_on:
      - db
    networks:
      - app_network

  webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: conversational_webui
    ports:
      - "8080:8080"
    restart: always
    environment:
      # The WebUI backend can reach our Python backend via its service name
      # "backend" on the custom Docker network.
      OPENAI_API_BASE_URL: "http://backend:8000/v1"
      WEBUI_AUTH: "False"  # Disable authentication
    depends_on:
      - backend
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local